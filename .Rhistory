tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
generate <- function(n,tau) {
## n = 500
X <- rnorm(n, 0,1)^5
A <- c()
for (x in X){
a = if (x < 0.01) 1 else 0
A <- c(A,a)
}
## \beta0 = \beta1 = \beta2 = 1, \beta3 = 2
Y <- rep(n,1) + A + X + 2*A*X + rnorm(n,0,1)
data <- do.call(rbind, Map(data.frame, Y=Y, x1= A, x2 = X, x3 = 2*A*X))
fit <- lm(Y ~ x1 + x2 + x3, data = data)
return(fit)
}
d <- generate(500,0.025)
d$coefficients
generate <- function(n,tau) {
## n = 500
X <- rnorm(n, 0,1)^5
A <- c()
for (x in X){
a = if (x < 0.01) 1 else 0
A <- c(A,a)
}
## \beta0 = \beta1 = \beta2 = 1, \beta3 = 2
Y <- rep(n,1) + A + X + 2*A*X + rnorm(n,0,1)
data <- do.call(rbind, Map(data.frame, Y=Y, x1= A, x2 = X, x3 = 2*A*X))
fit <- lm(Y ~ x1 + x2 + x3, data = data)
return(Y)
}
d <- generate(500,0.025)
plot(d)
generate <- function(n,tau) {
## n = 500
X <- rnorm(n, 0,1)^5
A <- c()
for (x in X){
a = if (x < 0.01) 1 else 0
A <- c(A,a)
}
## \beta0 = \beta1 = \beta2 = 1, \beta3 = 2
Y <- rep(n,1) + A + X + 2*A*X + rnorm(n,0,1)
data <- do.call(rbind, Map(data.frame, Y=Y, x1= A, x2 = X, x3 = 2*A*X))
fit <- lm(Y ~ x1 + x2 + x3, data = data)
return(data)
}
d <- generate(500,0.025)
plot(d)
data
d <- generate(500,0.025)
summary(data)
generate <- function(n,tau) {
## n = 500
X <- rnorm(n, 0,1)^5
A <- c()
for (x in X){
a = if (x < 0.01) 1 else 0
A <- c(A,a)
}
## \beta0 = \beta1 = \beta2 = 1, \beta3 = 2
Y <- rep(n,1) + A + X + 2*A*X + rnorm(n,0,1)
data <- do.call(rbind, Map(data.frame, Y=Y, x1= A, x2 = X, x3 = 2*A*X))
fit <- lm(Y ~ x1 + x2 + x3, data = data)
return(data)
}
Regressionp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
d <- generate(500,0.025)
Regressionp(d)
## \beta0 = \beta1 = \beta2 = 1, \beta3 = 2
Y <- rep(n,1) + A + X + 2*A*X + rnorm(n,0,1)
generate <- function(n,tau) {
## n = 500
X <- rnorm(n, 0,1)^5
A <- c()
for (x in X){
a = if (x < 0.01) 1 else 0
A <- c(A,a)
}
## \beta0 = \beta1 = \beta2 = 1, \beta3 = 2
Y <- rep(n,1) + A + X + 2*A*X + rnorm(n,0,1)
data <- do.call(rbind, Map(data.frame, Y=Y, x1= A, x2 = X, x3 = 2*A*X))
fit <- lm(Y ~ x1 + x2 + x3, data = data)
return(fit)
}
Regressionp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
d <- generate(500,0.025)
Regressionp(d)
for (i in 1:500) {
twofive <- c()
pointone <- c()
d <- generate(500,0.025)
e <- generate(500,0.01)
twofive<- c(twofive, Regressionp(d))
pointone <- c(pointone, Regression(e))
}
for (i in 1:500) {
twofive <- c()
pointone <- c()
d <- generate(500,0.025)
e <- generate(500,0.01)
twofive<- c(twofive, Regressionp(d))
pointone <- c(pointone, Regressionp(e))
}
length( which(twofive < 0.05))
length( which(twofive < 0.05))
length( which(pointone < 0.05))
generate <- function(n,tau) {
## n = 500
X <- rnorm(n, 0,1)^5
A <- c()
for (x in X){
a = if (x < 0.01) 1 else 0
A <- c(A,a)
}
## \beta0 = \beta1 = \beta2 = 1, \beta3 = 2
Y <- rep(n,1) + A + X + 2*A*X + rnorm(n,0,1)
data <- do.call(rbind, Map(data.frame, Y=Y, x1= A, x2 = X, x3 = 2*A*X))
fit <- lm(Y ~ x1 + x2 + x3, data = data)
return(fit)
}
Regressionp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
for (i in 1:500) {
twofive <- c()
pointone <- c()
d <- generate(500,0.025)
e <- generate(500,0.01)
twofive<- c(twofive, Regressionp(d))
pointone <- c(pointone, Regressionp(e))
}
vs <- t(rgl::icosahedron3d()$vb[1:3,])
install.packages("uniformly")
library(uniformly)
vs <- t(rgl::icosahedron3d()$vb[1:3,])
knitr::opts_chunk$set(echo = TRUE)
vs <- t(rgl::icosahedron3d()$vb[1:3,])
head(vs)
vs <- t(rgl::icosahedron3d()$vb[1:3,])
head(vs)
library(geometry)
install.packages(geometry)
install.packages("geometry")
library(geometry)
vs <- t(rgl::icosahedron3d()$vb[1:3,])
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
library(uniformly)
library(geometry)
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
runif_in_polygon(1, vs[th[1],], vs[th[2],], vs[th[3],], vs[th[4],])
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
runif_in_polygon(1, vs[th[1],], vs[th[2],], vs[th[3],], vs[th[4],])
vs <- t(rgl::icosahedron3d()$vb[1:3,])
sims <- runif_in_polygon(500, vs)
sims
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
sims <- runif_in_polygon(B, vs)
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
sims <- runif_in_polygon(B, vs)
plot(sims, xlim=c(-1,1), ylim=c(-1,1), pch=19, asp=1)
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
nsims <- 100
sims <- matrix(NA_real_, nrow=nsims, ncol=2)
for(k in 1:nsims){
th <- tetrahedra[sample.int(nrow(tetrahedra), 1, prob=probs),]
sims[k,] <- runif_in_polygon(1, vs)
}
sims
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
nsims <- 10000
sims <- matrix(NA_real_, nrow=nsims, ncol=2)
for(k in 1:nsims){
th <- tetrahedra[sample.int(nrow(tetrahedra), 1, prob=probs),]
sims[k,] <- runif_in_polygon(1, vs)
}
sims
dunif(x, min = 0, max = 1, log = FALSE)
dunif(c(0,1), min = 0, max = 1, log = FALSE)
dunif(1000, min = 0, max = 1, log = FALSE)
dunif(1000, min = 0, max = 1, log = FALSE)
runif(1000)
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
Z <- matrix(NA_real_, nrow=B, ncol=2)
for(k in 1:nsims){
th <- tetrahedra[sample.int(nrow(tetrahedra), 1, prob=probs),]
Z[k,] <- runif_in_polygon(1, vs)
}
fn <- runif(B)
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
Z <- matrix(NA_real_, nrow=B, ncol=2)
for(k in 1:nsims){
th <- tetrahedra[sample.int(nrow(tetrahedra), 1, prob=probs),]
Z[k,] <- runif_in_polygon(1, vs)
}
fnz <- runif(B)
library(randomForest)
install.packages("randomForest")
library(randomForest)
df <- as.data.frame(Z)
Z
df
dim(df)
cols(df)
col(df)
names(df)
df[,2] <- fnz
df
names(df)
df[,3] <- fnz
names(df)
#sampling from a convex hull
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
Z <- matrix(NA_real_, nrow=B, ncol=2)
for(k in 1:nsims){
th <- tetrahedra[sample.int(nrow(tetrahedra), 1, prob=probs),]
Z[k,] <- runif_in_polygon(1, vs)
}
df <- as.data.frame(Z)
# create outputs
fnz <- runif(B)
df[,3] <- fnz
names(df)
rf_classifier <- randomForest(V3 ~ ., data=df, ntree=10, mtry=2, importance=TRUE)
install.packages("gbmZ")
install.packages("gbm")
library(gbm)
install.packages("xgboost")
#sampling from a convex hull
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
Z <- matrix(NA_real_, nrow=B, ncol=2)
for(k in 1:nsims){
th <- tetrahedra[sample.int(nrow(tetrahedra), 1, prob=probs),]
Z[k,] <- runif_in_polygon(1, vs)
}
df <- as.data.frame(Z)
# create outputs
fnz <- runif(B)
df[,3] <- fnz
# random forests
rf_classifier <- randomForest(V3 ~ ., data=df, ntree=10, mtry=2, importance=TRUE)
# gradient boosted forests
bstSparse <- xgboost(data = df, label = df$V3, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
library(xgboost)
# gradient boosted forests
bstSparse <- xgboost(data = df, label = df$V3, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
# gradient boosted forests
bstSparse <- xgboost(data = Z, label = fnz, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
#sampling from a convex hull
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
Z <- matrix(NA_real_, nrow=B, ncol=2)
for(k in 1:nsims){
th <- tetrahedra[sample.int(nrow(tetrahedra), 1, prob=probs),]
Z[k,] <- runif_in_polygon(1, vs)
}
df <- as.data.frame(Z)
# create outputs
fnz <- runif(B)
df[,3] <- fnz
# random forests
rf_classifier <- randomForest(V3 ~ ., data=df, ntree=10, mtry=2, importance=TRUE)
# gradient boosted forests
bstSparse <- xgboost(data = Z, label = fnz, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
#sampling from a convex hull
B <- 10000
vs <- t(rgl::icosahedron3d()$vb[1:3,])
tetrahedra <- delaunayn(vs, options="Qz")
volumes <-
apply(tetrahedra, 1,
function(t){
volume_tetrahedron(vs[t[1],], vs[t[2],], vs[t[3],], vs[t[4],])
})
probs <- volumes/sum(volumes)
i <- sample.int(nrow(tetrahedra), 1, prob=probs)
th <- tetrahedra[i,]
Z <- matrix(NA_real_, nrow=B, ncol=2)
for(k in 1:B){
th <- tetrahedra[sample.int(nrow(tetrahedra), 1, prob=probs),]
Z[k,] <- runif_in_polygon(1, vs)
}
df <- as.data.frame(Z)
# create outputs
fnz <- runif(B)
df[,3] <- fnz
# random forests
rf_classifier <- randomForest(V3 ~ ., data=df, ntree=10, mtry=2, importance=TRUE)
# gradient boosted forests
bstSparse <- xgboost(data = Z, label = fnz, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
setwd("~/Documents/Projects/statistics_basics")
